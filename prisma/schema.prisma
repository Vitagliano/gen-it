// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  address      String       @unique // Endereço da carteira do usuário
  collections  Collection[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Collection {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  tokenAmount  Int
  dimensions   Json         // { width: Int, height: Int }
  format       String       // "svg", "jpg", "png"
  pixelated    Boolean      @default(false)
  startAtZero  Boolean      @default(false)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String       @db.ObjectId
  attributes   Attribute[]
  tokens       Token[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  templates    Template[]
  rules        TraitRule[]
}

model Attribute {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String       // Ex: "Clothes", "Hair", "Eyes"
  order        Int          // Ordem da layer
  collection   Collection   @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String       @db.ObjectId
  traits       Trait[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  templates    TemplateAttribute[]
}

model Trait {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String       // Ex: "alien", "dress", "ruffles"
  imagePath    String       // Caminho para o arquivo de imagem
  rarity       Float        // Raridade em porcentagem ou peso
  isEnabled    Boolean      @default(true)
  attribute    Attribute    @relation(fields: [attributeId], references: [id])
  attributeId  String       @db.ObjectId
  tokens       Token[]      @relation(fields: [tokenIds], references: [id])
  tokenIds     String[]     @db.ObjectId
  rules        TraitRule[]  @relation("TraitRuleTraits", fields: [ruleIds], references: [id])
  ruleIds      String[]     @db.ObjectId
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Token {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  tokenNumber  Int
  metadata     Json
  collection   Collection   @relation(fields: [collectionId], references: [id])
  collectionId String       @db.ObjectId
  traits       Trait[]      @relation(fields: [traitIds], references: [id])
  traitIds     String[]     @db.ObjectId
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Template {
  id           String              @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  rarity       Int                 @default(100)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  collectionId String              @db.ObjectId
  collection   Collection          @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  attributes   TemplateAttribute[]
}

model TemplateAttribute {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  enabled     Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  templateId  String    @db.ObjectId
  template    Template  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  attributeId String    @db.ObjectId
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@unique([templateId, attributeId])
}

model TraitRule {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  ruleType     String     // "EXCLUDE", "ONLY_TOGETHER", "ALWAYS_TOGETHER"
  traits       Trait[]    @relation("TraitRuleTraits", fields: [traitIds], references: [id])
  traitIds     String[]   @db.ObjectId
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String     @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}